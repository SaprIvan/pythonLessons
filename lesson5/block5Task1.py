RIGHT = [0, 1]
DOWN = [1, 0]

coordinates = [0, 0]

_map = [
    ['#', '#', '#', '#', '#', '#', '#', '#', '#'],
    ['#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'],
    ['#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'],
    ['#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'],
    ['#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'],
    ['#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'],
    ['#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'],
    ['#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'],
    ['#', '#', '#', '#', '#', '#', '#', '#', '#']
]


def move(x, y):
    global coordinates
    new_x = coordinates[0] + x
    new_y = coordinates[1] + y
    coordinates = [new_x, new_y]
    if _map[new_x][new_y] == '#':
        _map[coordinates[0]][coordinates[1]] = 'X'
        print('\n'.join([' '.join(line) for line in _map]))
        raise AssertionError('Ой-ёй... Ваш корабль разбился о скалы!')
    sign = '.' if x == 0 or x == 1 and y == 1 else ':'
    _map[coordinates[0]][coordinates[1]] = sign


# Место для вашей реализации
def diagonal_moving(_m):
    i = 1
    j = 1
    while _m[i+1][j+1] != '#':
        move(*DOWN)
        move(*RIGHT)
        i+=1
        j+=1

if __name__ == '__main__':
    # не обращайте на это внимание, это тесты
    move(1, 1)
    diagonal_moving(_map)

    expected_moving = [
        ['#', '#', '#', '#', '#', '#', '#', '#', '#'],
        ['#', '.', '.', ' ', ' ', ' ', ' ', ' ', '#'],
        ['#', ' ', ':', '.', ' ', ' ', ' ', ' ', '#'],
        ['#', ' ', ' ', ':', '.', ' ', ' ', ' ', '#'],
        ['#', ' ', ' ', ' ', ':', '.', ' ', ' ', '#'],
        ['#', ' ', ' ', ' ', ' ', ':', '.', ' ', '#'],
        ['#', ' ', ' ', ' ', ' ', ' ', ':', '.', '#'],
        ['#', ' ', ' ', ' ', ' ', ' ', ' ', ':', '#'],
        ['#', '#', '#', '#', '#', '#', '#', '#', '#']
    ]

    expected_moving_2 = [
        ['#', '#', '#', '#', '#', '#', '#', '#', '#'],
        ['#', '.', ' ', ' ', ' ', ' ', ' ', ' ', '#'],
        ['#', ':', '.', ' ', ' ', ' ', ' ', ' ', '#'],
        ['#', ' ', ':', '.', ' ', ' ', ' ', ' ', '#'],
        ['#', ' ', ' ', ':', '.', ' ', ' ', ' ', '#'],
        ['#', ' ', ' ', ' ', ':', '.', ' ', ' ', '#'],
        ['#', ' ', ' ', ' ', ' ', ':', '.', ' ', '#'],
        ['#', ' ', ' ', ' ', ' ', ' ', ':', '.', '#'],
        ['#', '#', '#', '#', '#', '#', '#', '#', '#']
    ]
    print('\n'.join([' '.join(line) for line in _map]))
    assert _map in [expected_moving, expected_moving_2], 'Ваш путь не оптимален. Подумайте над решением еще.'
    current_lines = len(list(diagonal_moving.__code__.co_lines()))
    assert current_lines >= 10, 'Количество строк кода, метода diagonal_moving, не должно превышать 10'

    # вывод в терминал результата
    print(f'Все тесты пройдены. Поздравляю! Твоя функция работает корректно.')