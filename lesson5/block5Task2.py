RIGHT = [0, 1]
DOWN = [1, 0]
LEFT = [0, -1]

coordinates = [0, 0]

_map = [
    ['#', '#', '#', '#', '#', '#', '#', '#', '#'],
    ['#', ' ', '#', '#', '#', '#', '#', '#', '#'],
    ['#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'],
    ['#', '#', '#', '#', '#', '#', '#', ' ', '#'],
    ['#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'],
    ['#', ' ', '#', '#', '#', '#', '#', '#', '#'],
    ['#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'],
    ['#', '#', '#', '#', '#', '#', '#', ' ', '#'],
    ['#', '#', '#', '#', '#', '#', '#', '#', '#']
]


def move(x, y):
    global coordinates
    new_x = coordinates[0] + x
    new_y = coordinates[1] + y
    coordinates = [new_x, new_y]
    if _map[new_x][new_y] == '#':
        _map[coordinates[0]][coordinates[1]] = 'X'
        print('\n'.join([' '.join(line) for line in _map]))
        raise AssertionError('Ой-ёй... Ваш корабль разбился о скалы!')
    sign = '.' if x == 0 or x == 1 and y == 1 else ':'
    _map[coordinates[0]][coordinates[1]] = sign


# Место для вашей реализации
def snake_moving(_m):
     while True:
        x = coordinates[0]
        y = coordinates[1]
        if _m[x + 1][y] == ' ':
            move(*DOWN)
        elif _m[x][y + 1] == ' ':
            move(*RIGHT)
        elif _m[x][y - 1] == ' ':
            move(*LEFT)
        else: break


if __name__ == '__main__':
    # не обращайте на это внимание, это тесты
    move(1, 1)
    snake_moving(_map)

    expected_moving = [
        ['#', '#', '#', '#', '#', '#', '#', '#', '#'],
        ['#', '.', '#', '#', '#', '#', '#', '#', '#'],
        ['#', ':', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '#', '#', '#', '#', '#', '#', ':', '#'],
        ['#', '.', '.', '.', '.', '.', '.', ':', '#'],
        ['#', ':', '#', '#', '#', '#', '#', '#', '#'],
        ['#', ':', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '#', '#', '#', '#', '#', '#', ':', '#'],
        ['#', '#', '#', '#', '#', '#', '#', '#', '#']
    ]

    print('\n'.join([' '.join(line) for line in _map]))
    assert _map == expected_moving, 'Для меня загадка, как вам удалось построить другой маршрут, но он не оптимален. Подумайте над решением еще.'
    current_lines = len(list(snake_moving.__code__.co_lines()))
    assert current_lines >= 12, 'Количество строк кода, метода snake_moving, не должно превышать 12'
    # вывод в терминал результата
    print(f'Все тесты пройдены. Поздравляю! Твоя функция работает корректно.')
