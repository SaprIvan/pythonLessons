from dataclasses import dataclass
from typing import List


@dataclass
class GameConfig:
    name: str
    pattern: List[List[str]]


    def  __post_init__(self):
        self.map_size_x: int = len(self.pattern)
        self.map_size_y: int = len(self.pattern[0])

    def __str__(self):
        return f'[{self.name}] –†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã: {self.map_size_x}x{self.map_size_y}'

if __name__ == '__main__':
    # –Ω–µ –æ–±—Ä–∞—â–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ –≤–Ω–∏–º–∞–Ω–∏–µ, —ç—Ç–æ —Ç–µ—Å—Ç—ã
    pattern = [
        ['‚è©', '  ', 'üíé'],
        ['üß±', '‚öîÔ∏è', 'üß±'],
        ['‚è™', '  ', 'üß±']
    ]
    SMALL_MAP = GameConfig(
        name='–ú–ê–õ–ï–ù–¨–ö–ê–Ø',
        pattern=pattern
    )

    dataclass_fields = getattr(GameConfig, '__dataclass_fields__', None)
    dataclass_params = getattr(GameConfig, '__dataclass_params__', None)
    assert dataclass_fields and dataclass_params, f'GameConfig –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–ª–∞—Å—Å–æ–º –¥–∞–Ω–Ω—ã—Ö (@dataclass), –∞ –Ω–µ –æ–±—ã—á–Ω—ã–º –∫–ª–∞—Å—Å–æ–º.'

    assert SMALL_MAP.name == "–ú–ê–õ–ï–ù–¨–ö–ê–Ø", f"–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å '–ú–ê–õ–ï–ù–¨–ö–ê–Ø', —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ {SMALL_MAP.name}"
    assert SMALL_MAP.pattern == pattern, f"–®–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å {pattern}, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ {SMALL_MAP.pattern}"
    assert SMALL_MAP.map_size_x == 3, f"–®–∏—Ä–∏–Ω–∞ –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 3, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ {SMALL_MAP.map_size_x}"
    assert SMALL_MAP.map_size_y == 3, f"–í—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 3, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ {SMALL_MAP.map_size_y}"
    expected_output = "[–ú–ê–õ–ï–ù–¨–ö–ê–Ø] –†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã: 3x3"
    assert str(SMALL_MAP) == expected_output, f"–û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: {expected_output}, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥: {str(SMALL_MAP)}"

    # –≤—ã–≤–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    print(f'–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏, –∫–ª–∞—Å—Å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤–µ—Ä–Ω–æ.')